[project]
name = "guisirsquirrelassistant"
version = "0.1.0"
description = "Hobbyist maintenance of SirSquirrelAssistant"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "customtkinter>=5.2.2",
    "keyboard>=0.13.5",
    "mss>=10.1.0",
    "numpy>=2.2.6",
    "opencv-python>=4.11.0.86",
    "pillow>=11.3.0",
    "pyautogui>=0.9.54",
    "requests>=2.32.5",
    "urllib3>=2.5.0",
]

[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "types-requests>=2.32.4.20250611",
]



######## TESTING STUFF AND LINTER ########

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=term-missing --cov-report=xml"
pythonpath = [".", "src"]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
markers = [
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
]

[tool.coverage.run]
omit = [
    # Don't include protobuf generated files in coverage report.
    "*/protobuf/*",
]

[tool.pyright]
include = ["src"]
exclude = ["**/node_modules", "**/__pycache__"]
venvPath = "."
venv = ".venv"

useLibraryCodeForTypes = true

typeCheckingMode = "standard"

pythonPlatform = "Windows"
pythonVersion = "3.13"

reportMissingTypeStubs = "information"
reportOptionalMemberAccess = "information"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# select = ["E4", "E5", "E7", "E9", "F", "I", "T201", "TD", "FIX"]
select = ["ALL"]
ignore = [
    "G004",
    "TRY401", # Warning for verbose exception logging
    # Incompatible rules
    "D203", # One blank line before class docstring
    "D213", # Multiline summary in docstring seccond line
    "COM812", # Require trailing comma
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    # at least this three should be fine in tests:
    "S101", # asserts allowed in tests...
    # "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    # "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "ANN201", # All test function return None by default, so don't raise this issue
    # "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]
